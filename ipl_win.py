# -*- coding: utf-8 -*-
"""ipl-win.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jcDUKHdrttfpXHkGQWDV9OFzKwX3Z0IC
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

match=pd.read_csv('matches.csv')
ball=pd.read_csv('deliveries.csv')

match

ball

total_score_df=ball.groupby(['match_id','inning']).sum()['total_runs'].reset_index()

total_score_df

total_score_df=total_score_df[total_score_df['inning']==1]

total_score_df

matches=match.merge(total_score_df[['match_id','total_runs']],left_on='id',right_on='match_id')

matches

teams=[
    'Sunrisers Hyderabad',
    'Mumbai Indians',
    'Royal Challengers Bangalore',
    'Kolkata Knight Riders',
    'Delhi Capitals'
    'Chennai Super Kings',
    'Rajasthan Royals',
    'Punjab Kings'
]

matches['team1']=matches['team1'].str.replace('Kings XI Punjab','Punjab Kings')
matches['team2']=matches['team2'].str.replace('Kings XI Punjab','Punjab Kings')

matches['team1']=matches['team1'].str.replace('Deccan Chargers','Sunrisers Hyderabad')
matches['team2']=matches['team2'].str.replace('Deccan Chargers','Sunrisers Hyderabad')

matches['team1']=matches['team1'].str.replace('Delhi Daredevils','Delhi Capitals')
matches['team2']=matches['team2'].str.replace('Delhi Daredevils','Delhi Capitals')

matches=matches[matches['dl_applied']==0]
matches=matches[['match_id','city','winner','total_runs']]

matches

balls=matches.merge(ball,on='match_id')
balls=balls[balls['inning']==2]

balls

balls['total_runs_y'].dtype

balls

balls['current score'] = balls.groupby('match_id')['total_runs_y'].cumsum()

balls.head()

balls['runs left']=balls['total_runs_x'] - balls['current score']

balls['balls left']=126- (balls['over']*6 + balls['ball'])

balls['player_dismissed'] = balls['player_dismissed'].fillna(0)

balls['player_dismissed'] = balls['player_dismissed'].apply(lambda x:x if x == 0 else 1)
wickets = balls.groupby('match_id')['player_dismissed'].cumsum().values
balls['wickets left'] = 10 - wickets
balls.tail()

balls['crr'] = (balls['current score']*6)/(120 - balls['balls left'])
balls['rrr'] = (balls['runs left']*6)/balls['balls left']

def result(row):
    return 1 if row['batting_team'] == row['winner'] else 0
balls['result'] = balls.apply(result,axis=1)

final_df = balls[['batting_team','bowling_team','city','runs left','balls left','wickets left','total_runs_x','crr','rrr','result']]
final_df = final_df.sample(final_df.shape[0])

final_df.dropna(inplace=True)
final_df = final_df[final_df['balls left'] != 0]
X = final_df.iloc[:,:-1]
y = final_df.iloc[:,-1]
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=1)

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder

transformer = ColumnTransformer([('tranformer',OneHotEncoder(sparse_output=False,drop='first'),['batting_team','bowling_team','city'])],remainder='passthrough')
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline

pipe = Pipeline(steps=[
    ('tranforming',transformer),
    ('training',LogisticRegression(solver='newton-cg',C=0.1))
])
pipe.fit(X_train,y_train)

y_pred = pipe.predict(X_test)
from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred)

